{"abi":[{"type":"function","name":"assertTruth","inputs":[{"name":"claim","type":"bytes","internalType":"bytes"},{"name":"asserter","type":"address","internalType":"address"},{"name":"callbackRecipient","type":"address","internalType":"address"},{"name":"escalationManager","type":"address","internalType":"address"},{"name":"liveness","type":"uint64","internalType":"uint64"},{"name":"currency","type":"address","internalType":"contract IERC20"},{"name":"bond","type":"uint256","internalType":"uint256"},{"name":"identifier","type":"bytes32","internalType":"bytes32"},{"name":"domainId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"nonpayable"},{"type":"function","name":"assertTruthWithDefaults","inputs":[{"name":"claim","type":"bytes","internalType":"bytes"},{"name":"asserter","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"nonpayable"},{"type":"function","name":"defaultIdentifier","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"getAssertion","inputs":[{"name":"assertionId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"tuple","internalType":"struct OptimisticOracleV3Interface.Assertion","components":[{"name":"escalationManagerSettings","type":"tuple","internalType":"struct OptimisticOracleV3Interface.EscalationManagerSettings","components":[{"name":"arbitrateViaEscalationManager","type":"bool","internalType":"bool"},{"name":"discardOracle","type":"bool","internalType":"bool"},{"name":"validateDisputers","type":"bool","internalType":"bool"},{"name":"assertingCaller","type":"address","internalType":"address"},{"name":"escalationManager","type":"address","internalType":"address"}]},{"name":"asserter","type":"address","internalType":"address"},{"name":"assertionTime","type":"uint64","internalType":"uint64"},{"name":"settled","type":"bool","internalType":"bool"},{"name":"currency","type":"address","internalType":"contract IERC20"},{"name":"expirationTime","type":"uint64","internalType":"uint64"},{"name":"settlementResolution","type":"bool","internalType":"bool"},{"name":"domainId","type":"bytes32","internalType":"bytes32"},{"name":"identifier","type":"bytes32","internalType":"bytes32"},{"name":"bond","type":"uint256","internalType":"uint256"},{"name":"callbackRecipient","type":"address","internalType":"address"},{"name":"disputer","type":"address","internalType":"address"}]}],"stateMutability":"view"},{"type":"function","name":"getAssertionResult","inputs":[{"name":"assertionId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"getMinimumBond","inputs":[{"name":"currency","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"settleAndGetAssertionResult","inputs":[{"name":"assertionId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"settleAssertion","inputs":[{"name":"assertionId","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"syncUmaParams","inputs":[{"name":"identifier","type":"bytes32","internalType":"bytes32"},{"name":"currency","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"AdminPropertiesSet","inputs":[{"name":"defaultCurrency","type":"address","indexed":false,"internalType":"contract IERC20"},{"name":"defaultLiveness","type":"uint64","indexed":false,"internalType":"uint64"},{"name":"burnedBondPercentage","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"AssertionDisputed","inputs":[{"name":"assertionId","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"caller","type":"address","indexed":true,"internalType":"address"},{"name":"disputer","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"AssertionMade","inputs":[{"name":"assertionId","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"domainId","type":"bytes32","indexed":false,"internalType":"bytes32"},{"name":"claim","type":"bytes","indexed":false,"internalType":"bytes"},{"name":"asserter","type":"address","indexed":true,"internalType":"address"},{"name":"callbackRecipient","type":"address","indexed":false,"internalType":"address"},{"name":"escalationManager","type":"address","indexed":false,"internalType":"address"},{"name":"caller","type":"address","indexed":false,"internalType":"address"},{"name":"expirationTime","type":"uint64","indexed":false,"internalType":"uint64"},{"name":"currency","type":"address","indexed":false,"internalType":"contract IERC20"},{"name":"bond","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"identifier","type":"bytes32","indexed":true,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"AssertionSettled","inputs":[{"name":"assertionId","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"bondRecipient","type":"address","indexed":true,"internalType":"address"},{"name":"disputed","type":"bool","indexed":false,"internalType":"bool"},{"name":"settlementResolution","type":"bool","indexed":false,"internalType":"bool"},{"name":"settleCaller","type":"address","indexed":false,"internalType":"address"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"assertTruth(bytes,address,address,address,uint64,address,uint256,bytes32,bytes32)":"6457c979","assertTruthWithDefaults(bytes,address)":"36b13af4","defaultIdentifier()":"d509b017","getAssertion(bytes32)":"88302884","getAssertionResult(bytes32)":"e39dfd7f","getMinimumBond(address)":"4360af3d","settleAndGetAssertionResult(bytes32)":"8ea2f2ab","settleAssertion(bytes32)":"4124beef","syncUmaParams(bytes32,address)":"a8655785"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"defaultCurrency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"defaultLiveness\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedBondPercentage\",\"type\":\"uint256\"}],\"name\":\"AdminPropertiesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"}],\"name\":\"AssertionDisputed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"domainId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"claim\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"callbackRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"escalationManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"}],\"name\":\"AssertionMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bondRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"disputed\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"settlementResolution\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"settleCaller\",\"type\":\"address\"}],\"name\":\"AssertionSettled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"claim\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callbackRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"escalationManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"liveness\",\"type\":\"uint64\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domainId\",\"type\":\"bytes32\"}],\"name\":\"assertTruth\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"claim\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"}],\"name\":\"assertTruthWithDefaults\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultIdentifier\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"}],\"name\":\"getAssertion\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"arbitrateViaEscalationManager\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"discardOracle\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"validateDisputers\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"assertingCaller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"escalationManager\",\"type\":\"address\"}],\"internalType\":\"struct OptimisticOracleV3Interface.EscalationManagerSettings\",\"name\":\"escalationManagerSettings\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"assertionTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"settlementResolution\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"domainId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"callbackRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"}],\"internalType\":\"struct OptimisticOracleV3Interface.Assertion\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"}],\"name\":\"getAssertionResult\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"getMinimumBond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"}],\"name\":\"settleAndGetAssertionResult\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"}],\"name\":\"settleAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"syncUmaParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"assertTruth(bytes,address,address,address,uint64,address,uint256,bytes32,bytes32)\":{\"details\":\"The caller must approve this contract to spend at least bond amount of currency.\",\"params\":{\"asserter\":\"receives bonds back at settlement. This could be msg.sender or any other account that the caller wants to receive the bond at settlement time.\",\"bond\":\"amount of currency to pull from the caller and hold in escrow until the assertion is resolved. This must be >= getMinimumBond(address(currency)).\",\"callbackRecipient\":\"if configured, this address will receive a function call assertionResolvedCallback and assertionDisputedCallback at resolution or dispute respectively. Enables dynamic responses to these events. The recipient _must_ implement these callbacks and not revert or the assertion resolution will be blocked.\",\"claim\":\"the truth claim being asserted. This is an assertion about the world, and is verified by disputers.\",\"currency\":\"bond currency pulled from the caller and held in escrow until the assertion is resolved.\",\"domainId\":\"optional domain that can be used to relate this assertion to others in the escalationManager and can be used by the configured escalationManager to define custom behavior for groups of assertions. This is typically used for \\\"escalation games\\\" by changing bonds or other assertion properties based on the other assertions that have come before. If not needed this value should be 0 to save gas.\",\"escalationManager\":\"if configured, this address will control escalation properties of the assertion. This means a) choosing to arbitrate via the UMA DVM, b) choosing to discard assertions on dispute, or choosing to validate disputes. Combining these, the asserter can define their own security properties for the assertion. escalationManager also _must_ implement the same callbacks as callbackRecipient.\",\"identifier\":\"UMA DVM identifier to use for price requests in the event of a dispute. Must be pre-approved.\",\"liveness\":\"time to wait before the assertion can be resolved. Assertion can be disputed in this time.\"},\"returns\":{\"_0\":\"assertionId unique identifier for this assertion.\"}},\"assertTruthWithDefaults(bytes,address)\":{\"details\":\"The caller must approve this contract to spend at least the result of getMinimumBond(defaultCurrency).\",\"params\":{\"asserter\":\"receives bonds back at settlement. This could be msg.sender or any other account that the caller wants to receive the bond at settlement time.\",\"claim\":\"the truth claim being asserted. This is an assertion about the world, and is verified by disputers.\"},\"returns\":{\"_0\":\"assertionId unique identifier for this assertion.\"}},\"defaultIdentifier()\":{\"returns\":{\"_0\":\"The default identifier.\"}},\"getAssertion(bytes32)\":{\"params\":{\"assertionId\":\"unique identifier for the assertion to fetch information for.\"},\"returns\":{\"_0\":\"assertion information about the assertion.\"}},\"getAssertionResult(bytes32)\":{\"params\":{\"assertionId\":\"unique identifier for the assertion to fetch the resolution for.\"},\"returns\":{\"_0\":\"resolution of the assertion.\"}},\"getMinimumBond(address)\":{\"params\":{\"currency\":\"currency to calculate the minimum bond for.\"},\"returns\":{\"_0\":\"minimum bond amount.\"}},\"settleAndGetAssertionResult(bytes32)\":{\"params\":{\"assertionId\":\"unique identifier for the assertion to resolve and return the resolution for.\"},\"returns\":{\"_0\":\"resolution of the assertion.\"}},\"settleAssertion(bytes32)\":{\"params\":{\"assertionId\":\"unique identifier for the assertion to resolve.\"}},\"syncUmaParams(bytes32,address)\":{\"params\":{\"currency\":\"currency to fetch information for and store locally.\",\"identifier\":\"identifier to fetch information for and store locally.\"}}},\"title\":\"Optimistic Oracle V3 Interface that callers must use to assert truths about the world.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"assertTruth(bytes,address,address,address,uint64,address,uint256,bytes32,bytes32)\":{\"notice\":\"Asserts a truth about the world, using a fully custom configuration.\"},\"assertTruthWithDefaults(bytes,address)\":{\"notice\":\"Asserts a truth about the world, using the default currency and liveness. No callback recipient or escalation manager is enabled. The caller is expected to provide a bond of finalFee/burnedBondPercentage (with burnedBondPercentage set to 50%, the bond is 2x final fee) of the default currency.\"},\"defaultIdentifier()\":{\"notice\":\"Returns the default identifier used by the Optimistic Oracle V3.\"},\"getAssertion(bytes32)\":{\"notice\":\"Fetches information about a specific assertion and returns it.\"},\"getAssertionResult(bytes32)\":{\"notice\":\"Fetches the resolution of a specific assertion and returns it. If the assertion has not been settled then this will revert. If the assertion was disputed and configured to discard the oracle resolution return false.\"},\"getMinimumBond(address)\":{\"notice\":\"Returns the minimum bond amount required to make an assertion. This is calculated as the final fee of the currency divided by the burnedBondPercentage. If burn percentage is 50% then the min bond is 2x the final fee.\"},\"settleAndGetAssertionResult(bytes32)\":{\"notice\":\"Settles an assertion and returns the resolution.\"},\"settleAssertion(bytes32)\":{\"notice\":\"Resolves an assertion. If the assertion has not been disputed, the assertion is resolved as true and the asserter receives the bond. If the assertion has been disputed, the assertion is resolved depending on the oracle result. Based on the result, the asserter or disputer receives the bond. If the assertion was disputed then an amount of the bond is sent to the UMA Store as an oracle fee based on the burnedBondPercentage. The remainder of the bond is returned to the asserter or disputer.\"},\"syncUmaParams(bytes32,address)\":{\"notice\":\"Fetches information about a specific identifier & currency from the UMA contracts and stores a local copy of the information within this contract. This is used to save gas when making assertions as we can avoid an external call to the UMA contracts to fetch this.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/OptimisticOracleV3Interface.sol\":\"OptimisticOracleV3Interface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\"]},\"sources\":{\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"src/interfaces/OptimisticOracleV3Interface.sol\":{\"keccak256\":\"0x1d9b987811ee206b1f55bc1e3b4d194859a4887b4e1bd52f29bbc4dd430fd39c\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://026ea6d6bdea81c4e4a3034b703bd5e90ab300ebd1578a302339834cba90c7e2\",\"dweb:/ipfs/QmU7xtbTFYtKxSrKwiKzM53Y9dc4o7a1ZhSM6zRXBVony6\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.16+commit.07a7930e"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IERC20","name":"defaultCurrency","type":"address","indexed":false},{"internalType":"uint64","name":"defaultLiveness","type":"uint64","indexed":false},{"internalType":"uint256","name":"burnedBondPercentage","type":"uint256","indexed":false}],"type":"event","name":"AdminPropertiesSet","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"assertionId","type":"bytes32","indexed":true},{"internalType":"address","name":"caller","type":"address","indexed":true},{"internalType":"address","name":"disputer","type":"address","indexed":true}],"type":"event","name":"AssertionDisputed","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"assertionId","type":"bytes32","indexed":true},{"internalType":"bytes32","name":"domainId","type":"bytes32","indexed":false},{"internalType":"bytes","name":"claim","type":"bytes","indexed":false},{"internalType":"address","name":"asserter","type":"address","indexed":true},{"internalType":"address","name":"callbackRecipient","type":"address","indexed":false},{"internalType":"address","name":"escalationManager","type":"address","indexed":false},{"internalType":"address","name":"caller","type":"address","indexed":false},{"internalType":"uint64","name":"expirationTime","type":"uint64","indexed":false},{"internalType":"contract IERC20","name":"currency","type":"address","indexed":false},{"internalType":"uint256","name":"bond","type":"uint256","indexed":false},{"internalType":"bytes32","name":"identifier","type":"bytes32","indexed":true}],"type":"event","name":"AssertionMade","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"assertionId","type":"bytes32","indexed":true},{"internalType":"address","name":"bondRecipient","type":"address","indexed":true},{"internalType":"bool","name":"disputed","type":"bool","indexed":false},{"internalType":"bool","name":"settlementResolution","type":"bool","indexed":false},{"internalType":"address","name":"settleCaller","type":"address","indexed":false}],"type":"event","name":"AssertionSettled","anonymous":false},{"inputs":[{"internalType":"bytes","name":"claim","type":"bytes"},{"internalType":"address","name":"asserter","type":"address"},{"internalType":"address","name":"callbackRecipient","type":"address"},{"internalType":"address","name":"escalationManager","type":"address"},{"internalType":"uint64","name":"liveness","type":"uint64"},{"internalType":"contract IERC20","name":"currency","type":"address"},{"internalType":"uint256","name":"bond","type":"uint256"},{"internalType":"bytes32","name":"identifier","type":"bytes32"},{"internalType":"bytes32","name":"domainId","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"assertTruth","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"bytes","name":"claim","type":"bytes"},{"internalType":"address","name":"asserter","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"assertTruthWithDefaults","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"defaultIdentifier","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"bytes32","name":"assertionId","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getAssertion","outputs":[{"internalType":"struct OptimisticOracleV3Interface.Assertion","name":"","type":"tuple","components":[{"internalType":"struct OptimisticOracleV3Interface.EscalationManagerSettings","name":"escalationManagerSettings","type":"tuple","components":[{"internalType":"bool","name":"arbitrateViaEscalationManager","type":"bool"},{"internalType":"bool","name":"discardOracle","type":"bool"},{"internalType":"bool","name":"validateDisputers","type":"bool"},{"internalType":"address","name":"assertingCaller","type":"address"},{"internalType":"address","name":"escalationManager","type":"address"}]},{"internalType":"address","name":"asserter","type":"address"},{"internalType":"uint64","name":"assertionTime","type":"uint64"},{"internalType":"bool","name":"settled","type":"bool"},{"internalType":"contract IERC20","name":"currency","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"settlementResolution","type":"bool"},{"internalType":"bytes32","name":"domainId","type":"bytes32"},{"internalType":"bytes32","name":"identifier","type":"bytes32"},{"internalType":"uint256","name":"bond","type":"uint256"},{"internalType":"address","name":"callbackRecipient","type":"address"},{"internalType":"address","name":"disputer","type":"address"}]}]},{"inputs":[{"internalType":"bytes32","name":"assertionId","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getAssertionResult","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"currency","type":"address"}],"stateMutability":"view","type":"function","name":"getMinimumBond","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"bytes32","name":"assertionId","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"settleAndGetAssertionResult","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"bytes32","name":"assertionId","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"settleAssertion"},{"inputs":[{"internalType":"bytes32","name":"identifier","type":"bytes32"},{"internalType":"address","name":"currency","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"syncUmaParams"}],"devdoc":{"kind":"dev","methods":{"assertTruth(bytes,address,address,address,uint64,address,uint256,bytes32,bytes32)":{"details":"The caller must approve this contract to spend at least bond amount of currency.","params":{"asserter":"receives bonds back at settlement. This could be msg.sender or any other account that the caller wants to receive the bond at settlement time.","bond":"amount of currency to pull from the caller and hold in escrow until the assertion is resolved. This must be >= getMinimumBond(address(currency)).","callbackRecipient":"if configured, this address will receive a function call assertionResolvedCallback and assertionDisputedCallback at resolution or dispute respectively. Enables dynamic responses to these events. The recipient _must_ implement these callbacks and not revert or the assertion resolution will be blocked.","claim":"the truth claim being asserted. This is an assertion about the world, and is verified by disputers.","currency":"bond currency pulled from the caller and held in escrow until the assertion is resolved.","domainId":"optional domain that can be used to relate this assertion to others in the escalationManager and can be used by the configured escalationManager to define custom behavior for groups of assertions. This is typically used for \"escalation games\" by changing bonds or other assertion properties based on the other assertions that have come before. If not needed this value should be 0 to save gas.","escalationManager":"if configured, this address will control escalation properties of the assertion. This means a) choosing to arbitrate via the UMA DVM, b) choosing to discard assertions on dispute, or choosing to validate disputes. Combining these, the asserter can define their own security properties for the assertion. escalationManager also _must_ implement the same callbacks as callbackRecipient.","identifier":"UMA DVM identifier to use for price requests in the event of a dispute. Must be pre-approved.","liveness":"time to wait before the assertion can be resolved. Assertion can be disputed in this time."},"returns":{"_0":"assertionId unique identifier for this assertion."}},"assertTruthWithDefaults(bytes,address)":{"details":"The caller must approve this contract to spend at least the result of getMinimumBond(defaultCurrency).","params":{"asserter":"receives bonds back at settlement. This could be msg.sender or any other account that the caller wants to receive the bond at settlement time.","claim":"the truth claim being asserted. This is an assertion about the world, and is verified by disputers."},"returns":{"_0":"assertionId unique identifier for this assertion."}},"defaultIdentifier()":{"returns":{"_0":"The default identifier."}},"getAssertion(bytes32)":{"params":{"assertionId":"unique identifier for the assertion to fetch information for."},"returns":{"_0":"assertion information about the assertion."}},"getAssertionResult(bytes32)":{"params":{"assertionId":"unique identifier for the assertion to fetch the resolution for."},"returns":{"_0":"resolution of the assertion."}},"getMinimumBond(address)":{"params":{"currency":"currency to calculate the minimum bond for."},"returns":{"_0":"minimum bond amount."}},"settleAndGetAssertionResult(bytes32)":{"params":{"assertionId":"unique identifier for the assertion to resolve and return the resolution for."},"returns":{"_0":"resolution of the assertion."}},"settleAssertion(bytes32)":{"params":{"assertionId":"unique identifier for the assertion to resolve."}},"syncUmaParams(bytes32,address)":{"params":{"currency":"currency to fetch information for and store locally.","identifier":"identifier to fetch information for and store locally."}}},"version":1},"userdoc":{"kind":"user","methods":{"assertTruth(bytes,address,address,address,uint64,address,uint256,bytes32,bytes32)":{"notice":"Asserts a truth about the world, using a fully custom configuration."},"assertTruthWithDefaults(bytes,address)":{"notice":"Asserts a truth about the world, using the default currency and liveness. No callback recipient or escalation manager is enabled. The caller is expected to provide a bond of finalFee/burnedBondPercentage (with burnedBondPercentage set to 50%, the bond is 2x final fee) of the default currency."},"defaultIdentifier()":{"notice":"Returns the default identifier used by the Optimistic Oracle V3."},"getAssertion(bytes32)":{"notice":"Fetches information about a specific assertion and returns it."},"getAssertionResult(bytes32)":{"notice":"Fetches the resolution of a specific assertion and returns it. If the assertion has not been settled then this will revert. If the assertion was disputed and configured to discard the oracle resolution return false."},"getMinimumBond(address)":{"notice":"Returns the minimum bond amount required to make an assertion. This is calculated as the final fee of the currency divided by the burnedBondPercentage. If burn percentage is 50% then the min bond is 2x the final fee."},"settleAndGetAssertionResult(bytes32)":{"notice":"Settles an assertion and returns the resolution."},"settleAssertion(bytes32)":{"notice":"Resolves an assertion. If the assertion has not been disputed, the assertion is resolved as true and the asserter receives the bond. If the assertion has been disputed, the assertion is resolved depending on the oracle result. Based on the result, the asserter or disputer receives the bond. If the assertion was disputed then an amount of the bond is sent to the UMA Store as an oracle fee based on the burnedBondPercentage. The remainder of the bond is returned to the asserter or disputer."},"syncUmaParams(bytes32,address)":{"notice":"Fetches information about a specific identifier & currency from the UMA contracts and stores a local copy of the information within this contract. This is used to save gas when making assertions as we can avoid an external call to the UMA contracts to fetch this."}},"version":1}},"settings":{"remappings":["@openzeppelin/=node_modules/@openzeppelin/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/interfaces/OptimisticOracleV3Interface.sol":"OptimisticOracleV3Interface"},"evmVersion":"london","libraries":{}},"sources":{"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol":{"keccak256":"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305","urls":["bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5","dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53"],"license":"MIT"},"src/interfaces/OptimisticOracleV3Interface.sol":{"keccak256":"0x1d9b987811ee206b1f55bc1e3b4d194859a4887b4e1bd52f29bbc4dd430fd39c","urls":["bzz-raw://026ea6d6bdea81c4e4a3034b703bd5e90ab300ebd1578a302339834cba90c7e2","dweb:/ipfs/QmU7xtbTFYtKxSrKwiKzM53Y9dc4o7a1ZhSM6zRXBVony6"],"license":"AGPL-3.0-only"}},"version":1},"id":2}