{"noir_version":"1.0.0-beta.1+03b58fa2dfcc8acc8cf5198b1b23b55676fbdb02","hash":16328401594243338985,"abi":{"parameters":[{"name":"CID","type":{"kind":"string","length":59},"visibility":"public"},{"name":"hash","type":{"kind":"string","length":64},"visibility":"public"}],"return_type":null,"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"7Z3dql3XkYXfRde62LNW/U2/SiOC4zhBYOxgOw1NyLv3kWTJoXXsw/zcI6hg3QROtGuvZdUYVPRleOifr/7y7Z//8bc/vf3+rz/89Oqr//rnq+9++Obrn9/+8P3TT/98tczf/5c//f3r79/9/NPPX//486uv+nr96tvv//Lqq/XIf71+9de333376qu0f715/TQRxxN5PFHHE308sU8nrsfxxDqesOOJ63jieOfX8c6v451fxzu/jnd+He/cj3fuxzv345378c79eOd+vHM/3rkf79yPd+7HO4/jncfxzuN453G88zjeeRzvPI53Hsc7j+Odx/HO83jnebzzPN55Hu88j3eexzvP453n8c7zeOd5vPM63nkd77yOd17HO6/jndfxzut453W88zreeR3vvI933sc77+Od9/HO+3jnfbzzPt55H++8j3fexzvfxzvfxzvfxzvfxzvfxzvfxzvfxzvfxzvfxzvfpzu3x+N4Yh1P2PHEdTzhxxNxPJHHE3U80ccTxztfxztfxztfxztfxztfxztfxztfxztfxztfxztfxzu3453b8c7teOd2vPNjDmfHHM6OOZwdczg75nB2zOHsmMPZMYezYw5nxxzOjjmcHXM4O+Zwdszh7JjD2TGHs2MOZ8cczo45nL3E4VZ/NuHHE3E8kccTdTzRxxP7dOIlDvfMxDqesOOJ453H8c7jeOdxvPM43nkc7zyOd57HO8/jnefxzvN453m88zzeeR7vPI93nsc7z+Od1/HO63jndbzzOt55He+8jndexzuv453X8c7reOd9vPM+3nkf77yPd97HO+/jnffxzvt453288z7e+T7e+T7e+T7e+T7e+T7e+T7e+T7e+T7e+T7e+T7d+fV4HE+s4wk7nnh25+v6NOKfjzy79Ce2/MvIEw3895HXn310V376g8Tj16+/Hh++/lmFPGGzj19v6w99/bNyevrz/cevj8cf+vpntff0P0o/fn3/sa9/VqjLvT/tK+uzhW0w9DxCfGlokSEjQxcZcjIUZCjJUJEhoohFFGFEEUYUYUQRRhRhRBFGFGFEEUYUYUQRRhRxEUVcRBEXUcRFFHERRVxEERdRxEUUcRFFXEQRThThRBFOFOFEEU4U4UQRThThRBFOFOFEEUEUEUQRQRQRRBFBFBFEEUEUEUQRQRQRRBFJFJFEEUkUkUQRSRSRRBFJFJFEEUkUkUQRRRRRRBFFFFFEEUUUUUQRRRRRRBFFFFFEEU0U0UQRTRTRRBFNFNFEEU0U0UQRTRTRRBGbKGITRWyiiE0UsYkiNlHEJorYRBGbKGIDRfjjQYYWGTIydJEhJ0NBhpIMFRlqMkQUQZilE2bphFk6YZZOmKUTZumEWTphlk6YpRNm6YRZOmGWTpilE2bphFk6YZZOmKUTZumEWTphlk6YpRNm6YRZOmGWTpilE2bphFk6YZZOmKUTZumEWTphlk6YpRNm6YRZOmGWTpilE2bphFk6YZZOmKUTZumEWTphlk6YpRNm6YRZOmGWTpilE2bphFk6YZZOmKUTZumEWTphlk6YpRNm6YRZOmGWTpilE2bphFk6YZZOmKUTZumEWTphlk6YpRNm6YRZOmGWTpilE2bphFk6YZZOmKUTZumEWTphlk6YpRNm6YRZOmGWTpilE2bphFk6YZZOmKUTZhmEWQZhlkGYZRBmGYRZBmGWQZhlEGYZhFkGYZZBmGUQZhmEWQZhlkGYZRBmGYRZBmGWQZhlEGYZhFkGYZZBmGUQZhmEWQZhlkGYZRBmGYRZBmGWQZhlEGYZhFkGYZZBmGUQZhmEWQZhlkGYZRBmGYRZBmGWQZhlEGYZhFkGYZZBmGUQZhmEWQZhlkGYZRBmGYRZBmGWQZhlEGYZhFkGYZZBmGUQZhmEWQZhlkGYZRBmGYRZBmGWQZhlEGYZhFkGYZZBmGUQZhmEWQZhlkGYZRBmGYRZBmGWQZhlEGYZhFkGYZZBmGUQZhmEWQZhlkGYZRBmGYRZBmGWQZhlEGYZhFkGYZZBmGUQZhmEWQZhlkGYZRBmmYRZJmGWSZhlEmaZhFkmYZZJmGUSZpmEWSZhlkmYZRJmmYRZJmGWSZhlEmaZhFkmYZZJmGUSZpmEWSZhlkmYZRJmmYRZJmGWSZhlEmaZhFkmYZZJmGUSZpmEWSZhlkmYZRJmmYRZJmGWSZhlEmaZhFkmYZZJmGUSZpmEWSZhlkmYZRJmmYRZJmGWSZhlEmaZhFkmYZZJmGUSZpmEWSZhlkmYZRJmmYRZJmGWSZhlEmaZhFkmYZZJmGUSZpmEWSZhlkmYZRJmmYRZJmGWSZhlEmaZhFkmYZZJmGUSZpmEWSZhlkmYZRJmmYRZJmGWSZhlEmaZhFkmYZZJmGUSZpmEWSZhlkmYZRJmmYRZJmGWSZhlEmZZhFkWYZZFmGURZlmEWRZhlkWYZRFmWYRZFmGWRZhlEWZZhFkWYZZFmGURZlmEWRZhlkWYZRFmWYRZFmGWRZhlEWZZhFkWYZZFmGURZlmEWRZhlkWYZRFmWYRZFmGWRZhlEWZZhFkWYZZFmGURZlmEWRZhlkWYZRFmWYRZFmGWRZhlEWZZhFkWYZZFmGURZlmEWRZhlkWYZRFmWYRZFmGWRZhlEWZZhFkWYZZFmGURZlmEWRZhlkWYZRFmWYRZFmGWRZhlEWZZhFkWYZZFmGURZlmEWRZhlkWYZRFmWYRZFmGWRZhlEWZZhFkWYZZFmGURZlmEWRZhlkWYZRFmWYRZFmGWRZhlEWZZhFkWYZZFmGURZtmEWTZhlk2YZRNm2YRZNmGWTZhlE2bZhFk2YZZNmGUTZtmEWTZhlk2YZRNm2YRZNmGWTZhlE2bZhFk2YZZNmGUTZtmEWTZhlk2YZRNm2YRZNmGWTZhlE2bZhFk2YZZNmGUTZtmEWTZhlk2YZRNm2YRZNmGWTZhlE2bZhFk2YZZNmGUTZtmEWTZhlk2YZRNm2YRZNmGWTZhlE2bZhFk2YZZNmGUTZtmEWTZhlk2YZRNm2YRZNmGWTZhlE2bZhFk2YZZNmGUTZtmEWTZhlk2YZRNm2YRZNmGWTZhlE2bZhFk2YZZNmGUTZtmEWTZhlk2YZRNm2YRZNmGWTZhlE2bZhFk2YZZNmGUTZtmEWTZhlk2YZRNmuQmz3IRZbsIsN2GWmzDLTZjlJsxyE2a5CbPchFluwiw3YZabMMtNmOUmzHITZrkJs9yEWW7CLDdhlpswy02Y5SbMchNmuQmz3IRZbsIsN2GWmzDLTZjlJsxyE2a5CbPchFluwiw3YZabMMtNmOUmzHL/BrPcHb8M2WPFvw+9/uzDZvvTh6/Y//cJvwE4/z+fsORPMPkTLvkTXP6EkD8h5U8o+RNa/gS5p0Pu6ZB7OuSeDrmnQ+7pkHs65J4OuadD7umQezrlnk65p1Pu6ZR7OuWeTrmnU+7plHs65Z5OuadL7umSe7rkni65p0vu6ZJ7uuSeLrmnS+7pknu65Z5uuadb7umWe7rlnm65p1vu6ZZ7uuWebrmnt9zTW+7pLff0lnt6yz295Z7eck9vuae33NNb7en1eDz0j1j6R5j+EZf+Ea5/ROgfkfpHlP4RrX+E3t1L7+6ld/fSu3vp3b307l56dy+9u5fe3Uvv7qV3t+ndbXp3m97dpne36d1teneb3t2md7fp3W16d196d196d196d196d196d196d196d196d196d196d7ve3a53t+vd7Xp3u97drne3693tene73t2ud3fo3R16d4fe3aF3d+jdHXp3h97doXd36N0denen3t2pd3fq3Z16d6fe3al3d+rdnXp3p97dqXd36d1deneX3t2ld3fp3V16d5fe3aV3d+ndXXp3t97drXd3693dene33t2td3fr3d16d7fe3a1399a7e+vdvfXu3np3b727t97dW+/urXf31rtbn1Vb+qza0mfVlj6rtvRZtSeKqn9E6B+R+keU/hGtf4Te3fqs2tJn1ZY+q7b0WbWlz6otfVZt6bNqS59VW/qs2tJn1ZY+q7b0WbWlz6otfVZt6bNqS59VW/qs2tJn1ZY+q7b0WbWlz6otfVZt6bNqS59VW/qs2tJn1ZY+q7b0WbWlz6otfVZt6bNqS59VW/qs2tJn1ZY+q7b0WbWlz6otfVZt6bNqS59VW/qs2tJn1ZY+q7b0WbWlz6otfVZt6bNqS59VW/qs2tJn1ZY+q7b0WbWlz6otfVZt6bNqS59VW/qs2tJn1ZY+q7b0WbWlz6otfVZt6bNqS59VW/qs2tJn1ZY+q7b0WbWlz6otfVZt6bNqS59VW/qs2tJn1ZY+q7b0WbWlz6otfVZt6bNqS59VW/qs2tJn1ZY+q7b0WbWlz6otfVZt6bNqS59VW/qs2tJn1UyfVTN9Vs30WTXTZ9Xs4fpHhP4RqX9E6R/R+kfo3a3Pqpk+q2b6rJrps2qmz6qZPqtm+qya6bNqps+qmT6rZvqsmumzaqbPqpk+q2b6rJrps2qmz6qZPqtm+qya6bNqps+qmT6rZvqsmumzaqbPqpk+q2b6rJrps2qmz6qZPqtm+qya6bNqps+qmT6rZvqsmumzaqbPqpk+q2b6rJrps2qmz6qZPqtm+qya6bNqps+qmT6rZvqsmumzaqbPqpk+q2b6rJrps2qmz6qZPqtm+qya6bNqps+qmT6rZvqsmumzaqbPqpk+q2b6rJrps2qmz6qZPqtm+qya6bNqps+qmT6rZvqsmumzaqbPqpk+q2b6rJrps2qmz6qZPqtm+qya6bNqps+qmT6rZvqsmumzaqbPqpk+q2b6rJrps2qmz6qZ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","file_map":{"3":{"source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        unsafe {\n            /*@safety: `sorted` array is checked to be:\n                a. a permutation of `input`'s elements\n                b. satisfying the predicate `ordering`\n            */\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n}\n","path":"std/array/mod.nr"},"30":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod bigint;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    unsafe {\n        //@safety: a print statement cannot be constrained\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    unsafe {\n        //@safety: a print statement cannot be constrained\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n","path":"std/lib.nr"},"62":{"source":"fn main(CID: pub str<59>, hash: pub str<64>) {\n    let mut (multibase, CIDbytes) = CID.as_bytes().as_slice().pop_front();\n    assert(multibase == 66); // Assert that the base is base32\n\n    println(CID);\n    println(hash);\n    println(CID.as_bytes());\n    println(hash.as_bytes());\n\n    // Map ASCII symbols to base32 encodings\n    let mut base32: [[u1;5];96] = [[0,0,0,0,0];96];\n\n    base32[65] = [0,0,0,0,0];\n    base32[66] = [0,0,0,0,1];\n    base32[67] = [0,0,0,1,0];\n    base32[68] = [0,0,0,1,1];\n    base32[69] = [0,0,1,0,0];\n    base32[70] = [0,0,1,0,1];\n    base32[71] = [0,0,1,1,0];\n    base32[72] = [0,0,1,1,1];\n    base32[73] = [0,1,0,0,0];\n    base32[74] = [0,1,0,0,1];\n    base32[75] = [0,1,0,1,0];\n    base32[76] = [0,1,0,1,1];\n    base32[77] = [0,1,1,0,0];\n    base32[78] = [0,1,1,0,1];\n    base32[79] = [0,1,1,1,0];\n    base32[80] = [0,1,1,1,1];\n    base32[81] = [1,0,0,0,0];\n    base32[82] = [1,0,0,0,1];\n    base32[83] = [1,0,0,1,0];\n    base32[84] = [1,0,0,1,1];\n    base32[85] = [1,0,1,0,0];\n    base32[86] = [1,0,1,0,1];\n    base32[87] = [1,0,1,1,0];\n    base32[88] = [1,0,1,1,1];\n    base32[89] = [1,1,0,0,0];\n    base32[90] = [1,1,0,0,1];\n    base32[50] = [1,1,0,1,0];\n    base32[51] = [1,1,0,1,1];\n    base32[52] = [1,1,1,0,0];\n    base32[53] = [1,1,1,0,1];\n    base32[54] = [1,1,1,1,0];\n    base32[55] = [1,1,1,1,1];\n\n    // Decode CID\n    let mut buffer: [u1;290] = [0;290]; \n    for i in 0..58 {\n        buffer[i*5]     = base32[CIDbytes[i]][0];\n        buffer[i*5+1]   = base32[CIDbytes[i]][1];\n        buffer[i*5+2]   = base32[CIDbytes[i]][2];\n        buffer[i*5+3]   = base32[CIDbytes[i]][3];\n        buffer[i*5+4]   = base32[CIDbytes[i]][4];\n    }\n\n    // Needs to be in nibbles for hex encoding\n    // Ignore first 4 bytes for version, multicodec, multihash, and length\n    let mut result: [u8;64] = [0;64];\n    for i in 8..buffer.len() / 4 {\n        let nibble: [u1;4] = [buffer[i*4], buffer[i*4+1], buffer[i*4+2], buffer[i*4+3]];\n        result[i-8] = binary_to_4bit_integer(nibble);\n    }\n\n    let mut digest: [u8;64] = result.map(|r| four_bit_to_hex(r));\n    assert(digest == hash.as_bytes()); // Assert that the decoded hash is equal to input hash\n\n}\n\nfn binary_to_4bit_integer(nibble: [u1; 4]) -> u8 {\n    let mut result: u8 = 0;\n    for i in 0..4 {\n        result += (nibble[i] as u8) * ((2).pow_32(3 - i as Field)) as u8;\n    }\n    result\n}\n\nfn four_bit_to_hex(nibble: u8) -> u8 {\n    assert(nibble < 16); // Ensure it's a 4-bit integer\n    let hex_chars = \"0123456789ABCDEF\".as_bytes();\n    hex_chars[nibble]\n}\n","path":"/home/chicken/Work/decoder/src/main.nr"}},"names":["main"],"brillig_names":["print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","directive_integer_quotient"]}