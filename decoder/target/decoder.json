{"noir_version":"1.0.0-beta.1+03b58fa2dfcc8acc8cf5198b1b23b55676fbdb02","hash":14409652356593343037,"abi":{"parameters":[{"name":"CID","type":{"kind":"string","length":59},"visibility":"public"},{"name":"hash","type":{"kind":"string","length":64},"visibility":"public"}],"return_type":null,"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"}}},"bytecode":"","debug_symbols":"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","file_map":{"3":{"source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        unsafe {\n            /*@safety: `sorted` array is checked to be:\n                a. a permutation of `input`'s elements\n                b. satisfying the predicate `ordering`\n            */\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n}\n","path":"std/array/mod.nr"},"62":{"source":"fn main(CID: pub str<59>, hash: pub str<64>) {\n    let mut (multibase, CIDbytes) = CID.as_bytes().as_slice().pop_front();\n    assert(multibase == 66); // Assert that the base is base32\n\n    // Map ASCII symbols to base32 encodings\n    let mut base32: [[u1;5];96] = [[0,0,0,0,0];96];\n\n    base32[65] = [0,0,0,0,0];\n    base32[66] = [0,0,0,0,1];\n    base32[67] = [0,0,0,1,0];\n    base32[68] = [0,0,0,1,1];\n    base32[69] = [0,0,1,0,0];\n    base32[70] = [0,0,1,0,1];\n    base32[71] = [0,0,1,1,0];\n    base32[72] = [0,0,1,1,1];\n    base32[73] = [0,1,0,0,0];\n    base32[74] = [0,1,0,0,1];\n    base32[75] = [0,1,0,1,0];\n    base32[76] = [0,1,0,1,1];\n    base32[77] = [0,1,1,0,0];\n    base32[78] = [0,1,1,0,1];\n    base32[79] = [0,1,1,1,0];\n    base32[80] = [0,1,1,1,1];\n    base32[81] = [1,0,0,0,0];\n    base32[82] = [1,0,0,0,1];\n    base32[83] = [1,0,0,1,0];\n    base32[84] = [1,0,0,1,1];\n    base32[85] = [1,0,1,0,0];\n    base32[86] = [1,0,1,0,1];\n    base32[87] = [1,0,1,1,0];\n    base32[88] = [1,0,1,1,1];\n    base32[89] = [1,1,0,0,0];\n    base32[90] = [1,1,0,0,1];\n    base32[50] = [1,1,0,1,0];\n    base32[51] = [1,1,0,1,1];\n    base32[52] = [1,1,1,0,0];\n    base32[53] = [1,1,1,0,1];\n    base32[54] = [1,1,1,1,0];\n    base32[55] = [1,1,1,1,1];\n\n    // Decode CID\n    let mut buffer: [u1;290] = [0;290]; \n    for i in 0..58 {\n        buffer[i*5]     = base32[CIDbytes[i]][0];\n        buffer[i*5+1]   = base32[CIDbytes[i]][1];\n        buffer[i*5+2]   = base32[CIDbytes[i]][2];\n        buffer[i*5+3]   = base32[CIDbytes[i]][3];\n        buffer[i*5+4]   = base32[CIDbytes[i]][4];\n    }\n\n    // Needs to be in nibbles for hex encoding\n    // Ignore first 4 bytes for version, multicodec, multihash, and length\n    let mut result: [u8;64] = [0;64];\n    for i in 8..buffer.len() / 4 {\n        let nibble: [u1;4] = [buffer[i*4], buffer[i*4+1], buffer[i*4+2], buffer[i*4+3]];\n        result[i-8] = binary_to_4bit_integer(nibble);\n    }\n\n    let mut digest: [u8;64] = result.map(|r| four_bit_to_hex(r));\n    assert(digest == hash.as_bytes()); // Assert that the decoded hash is equal to input hash\n\n}\n\nfn binary_to_4bit_integer(nibble: [u1; 4]) -> u8 {\n    let mut result: u8 = 0;\n    for i in 0..4 {\n        result += (nibble[i] as u8) * ((2).pow_32(3 - i as Field)) as u8;\n    }\n    result\n}\n\nfn four_bit_to_hex(nibble: u8) -> u8 {\n    assert(nibble < 16); // Ensure it's a 4-bit integer\n    let hex_chars = \"0123456789ABCDEF\".as_bytes();\n    hex_chars[nibble]\n}\n","path":"/home/chicken/Work/iBuyer/decoder/src/main.nr"}},"names":["main"],"brillig_names":["directive_integer_quotient"]}